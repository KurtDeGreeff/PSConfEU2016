<?xml version="1.0" encoding="utf-8" ?>
<helpItems xmlns="http://msh" schema="maml">
	<!--Edited with: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
	<!--Generated by: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
	<!--
		Module: 		ManageProfiles
		Version:		1.0.0.3
	-->
	<!--All Commands-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Profile</command:name>
			<maml:description>
				<maml:para>Gets all Windows PowerShell profiles on the local computer.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Profile</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Get-Profile functions gets all Windows PowerShell profiles that Windows PowerShell can find and run in a session.
With the Disabled switch parameter, it gets profiles that the Disable-Profile function in the ManageProfiles module has
disabled.

Get-Profile gets all and only *profile.ps1 files in the following locations:
-- AllUsers: $PSHome
-- CurrentUser: $Home\Documents\WindowsPowerShell

Get-Profile is user-specific, but not host-specific. It gets AllUsers and CurrentUser profiles for all hosts, but it
does not get CurrentUser profiles of other users.

Get-Profile returns a System.IO.FileInfo object for each profile that it finds. If it doesn&#39;t find any profiles, it
returns no objects, but it does not generate an error.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Profile</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Disabled</maml:name>
					<maml:description>
						<maml:para>Gets Windows PowerShell profiles that have been hidden from Windows PowerShell, such as by using the Disable-Profile
function in the ManageProfiles module.

The disabled profiles that -Disable returns are files are in the AllUsers and CurrentUser locations ($PSHome and
$Home\Documents\WindowsPowerShell) that have the distinctive &quot;.profile.ps1&quot; name with an extra &quot;.disabled&quot; file name
extension.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Disabled</maml:name>
				<maml:description>
					<maml:para>Gets Windows PowerShell profiles that have been hidden from Windows PowerShell, such as by using the Disable-Profile
function in the ManageProfiles module.

The disabled profiles that -Disable returns are files are in the AllUsers and CurrentUser locations ($PSHome and
$Home\Documents\WindowsPowerShell) that have the distinctive &quot;.profile.ps1&quot; name with an extra &quot;.disabled&quot; file name
extension.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para>You cannot pipe input to this function.</maml:para>
					<maml:para/>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.IO.FileInfo</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
					<maml:para/>
					<maml:para/>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title>Notes and Errors</maml:title>
			<maml:alert>
				<maml:para>-- Get-Profile is a function in the ManageProfiles module.
-- When Get-Profile does not find any profiles, it returns no objects and does not generate any errors.
-- Get-Profile is tested by Pester tests in the ManageProfiles.*.Tests.ps1 files.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Profile

    Directory: C:\Windows\System32\WindowsPowerShell\v1.0

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        3/27/2016  10:31 AM              0 profile.ps1


    Directory: C:\Users\User01\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        12/2/2015   8:22 PM             59 Microsoft.PowerShellISE_profile.ps1
-a----        7/31/2015   3:11 PM            863 Microsoft.PowerShell_profile.ps1
-a----        2/20/2016   3:14 PM          45058 profile.ps1</dev:code>
				<dev:remarks>
					<maml:para>This command gets all profiles on the current system.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Profile -Disabled


    Directory: C:\Windows\System32\WindowsPowerShell\v1.0

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        3/27/2016  10:31 AM              0 profile.ps1.disabled


    Directory: C:\Users\User01\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        12/2/2015   8:22 PM             59 Microsoft.PowerShellISE_profile.ps1.disabled
-a----        7/31/2015   3:11 PM            863 Microsoft.PowerShell_profile.ps1.disabled
-a----        2/20/2016   3:14 PM          45058 profile.ps1.disabled</dev:code>
				<dev:remarks>
					<maml:para>This command gets all profiles that have been disabled by adding &apos;.disabled&apos; to the file name extension. To disable
Windows PowerShell profiles, use the Disable-Profile function in the ManageProfiles module.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Profile
PS C:\&gt;
PS C:\&gt;Get-Profile -Disabled
PS C:\&gt;</dev:code>
				<dev:remarks>
					<maml:para>When Get-Profile (with or without the Disabled parameter) cannot find any matching profiles on the system, it returns
no objects and does not generate any errors.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>[IO.FileInfo[]]$result = Get-Profile
PS C:\&gt; $result += Get-Profile -Disabled
PS C:\&gt; $result

    Directory: C:\Windows\System32\WindowsPowerShell\v1.0


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/9/2016   9:39 AM              0 profile.ps1


    Directory: C:\Users\JuneBlender\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/3/2016   2:38 PM              0 Microsoft.PowerShell_profile.ps1.disabled
-a----        3/17/2016   8:06 AM           1679 profile.ps1.disabled</dev:code>
				<dev:remarks>
					<maml:para>These commands get both enabled and disabled profiles on the local system. Although both Enable-Profile and
Disable-Profile affect all profiles, some profiles error out because the session in which they&apos;re run is not elevated.
(To rename files in a System32 directory, you must run as administrator.)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Disable-Profile</maml:linkText>
				<maml:uri/>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Enable-Profile</maml:linkText>
				<maml:uri/>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Disable-Profile</command:name>
			<maml:description>
				<maml:para>Disables Windows PowerShell profiles so they are not effective</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Disable</command:verb>
			<command:noun>Profile</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Disable-Profile function disables profiles so Windows PowerShell can&#39;t find and run them. You can use
Disable-Profile to prevent profiles from polluting tests and demonstrations with code that is unlikely to be present on
the computers of other users.

To get enabled profiles, use Get-Profile. To get disabled profiles, use Get-Profile -Disabled.

Disable-Profile adds a &#39;.disabled&#39; string to the file name extension of all profiles that Get-Profile returns. Because
Windows PowerShell searches only for .ps1 files, the &#39;.disabled&#39; prevents it from finding and running these profiles in
any session. To re-enable the profiles, use the Enable-Profile function in the ManageProfiles module.

Disable-Profile is user-specific, but not host-specific. It disables AllUsers and CurrentUser profiles for all hosts,
but it does not disable CurrentUser profiles of other users.

Disable-Profile returns FileInfo objects for the files that it disabled. It does not return any objects for profile
files that it found, but could not disable, such as profiles in the System32 directory. Disable-Profile also writes a
warning to remind the user that profile changes are not effective in the current Windows PowerShell session.

To disable AllUsers profiles, you must run it in an elevated (Run as administrator) session. If the session is not
elevated, Disable-Profile generates a non-terminating error for each profile that it cannot disable. It still disables
the profiles that it can disable. Disable-Profiles does not generate errors when it cannot find any profiles.

Because Disable-Profile has no effect on profiles that are already disabled, you can run it repeatedly in elevated and
standard sessions.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Disable-Profile</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para>You cannot pipe input to this cmdlet.</maml:para>
					<maml:para/>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.IO.FileInfo</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
					<maml:para/>
					<maml:para/>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title/>
			<maml:alert>
				<maml:para>-- Disable-Profile is a function in the ManageProfiles module.
-- Disable-Profile generates a non-terminating error when it cannot disable an AllUsers profile, because it is not
running with administrator permissions.
-- When Disable-Profile does not find any enabled profiles, it returns no objects and does not generate any errors.
-- Disable-Profile is tested by Pester tests in the ManageProfiles.*.Tests.ps1 files.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-Profile

    Directory: C:\Users\JuneBlender\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/3/2016   2:38 PM              0 Microsoft.PowerShell_profile.ps1.disabled
-a----        3/17/2016   8:06 AM           1679 profile.ps1.disabled

WARNING: Profile changes are not effective until you restart Windows PowerShell</dev:code>
				<dev:remarks>
					<maml:para>This command disables all profiles. In this case, it found and disabled the CurrentUserAllHosts profile (profile.ps1)
and the CurrentUser profile for the Windows PowerShell console host (Microsoft.PowerShell_profile.ps1).</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-Profile

Disable-Profile : Cannot disable AllUsers profile:

C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1.
Run again in an elevated session.
At line:1 char:1
+ Disable-Profile
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Disable-Profile



    Directory: C:\Users\User01\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/3/2016   2:38 PM              0 Microsoft.PowerShell_profile.ps1.disabled
-a----        3/17/2016   8:06 AM           1679 profile.ps1.disabled

WARNING: Profile changes are not effective until you restart Windows PowerShell</dev:code>
				<dev:remarks>
					<maml:para>This example shows the effect of running Disable-Profile in an unelevated session. Disable-Profile found three
profiles. It disabled the CurrentUser profiles and generated an error message explaining that it could not disable the
AllUsersAllHosts profile.

Because Disable-Profile affects only enabled profiles and does not generate errors when it can&apos;t find any profiles, you
can run it repeatedly without ill effect.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-Profile
PS C:\&gt;</dev:code>
				<dev:remarks>
					<maml:para>When Disable-Profile cannot find any enabled profiles, it doesn&apos;t return any objects or generate any errors.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Get-Profile</maml:linkText>
				<maml:uri/>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Enable-Profile</maml:linkText>
				<maml:uri/>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Enable-Profile</command:name>
			<maml:description>
				<maml:para>Re-enables Windows PowerShell profiles that Disable-Profile disabled</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Enable</command:verb>
			<command:noun>Profile</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Enable-Profile function re-enables Windows PowerShell profiles so Windows PowerShell can find and run them. It is designed to reenable only the help files that Disable-Profile disabled.

Enable-Profile is user-specific, but not host-specific. It re-enables disabled AllUsers and CurrentUser profiles for all hosts,
but it cannot re-enable CurrentUser profiles of other users.

Enable-Profile returns FileInfo objects for the files that it enabled. It does not return any objects for profile
files that it found, but could not enable, such as profiles in the System32 directory. Enable-Profile also writes a
warning to remind the user that profile changes are not effective in the current Windows PowerShell session.

To enable AllUsers profiles, you must run the function in an elevated (Run as administrator) session. If the session is not
elevated, Enable-Profile generates a non-terminating error for each profile that it cannot disable. It still enables
the profiles that it can enable. Enable-Profiles does not generate errors when it cannot find any profiles.

Because Enable-Profile has no effect on profiles that are already enabled, you can run it repeatedly in elevated and
standard sessions.

To get enabled profiles, use Get-Profile. To get disabled profiles, use Get-Profile -Disabled.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Enable-Profile</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para>You cannot pipe input to this cmdlet.</maml:para>
					<maml:para/>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.IO.FileInfo</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
					<maml:para/>
					<maml:para/>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title/>
			<maml:alert>
				<maml:para>-- Enable-Profile is a function in the ManageProfiles module.
-- Enable-Profile generates a non-terminating error when it cannot enable a disabled AllUsers profile, because it is
not running with administrator permissions.
-- When Enable-Profile does not find any disabled profiles, it returns no objects and does not generate any errors.
-- Enable-Profile is tested by Pester tests in the ManageProfiles.*.Tests.ps1 files.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Enable-Profile

    Directory: C:\Users\User01\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        2/17/2016   8:06 AM           1679 profile.ps1

WARNING: Profile changes are not effective until you restart Windows PowerShell</dev:code>
				<dev:remarks>
					<maml:para>This command re-enables all disabled profiles. In this case, it found and re-enabled the CurrentUserAllHosts profile
(profile.ps1).</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>PS C:\&gt; Get-Profile -Disabled

    Directory: C:\Windows\System32\WindowsPowerShell\v1.0

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/9/2016   9:39 AM              0 profile.ps1.disabled


    Directory: C:\Users\User01\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/3/2016   2:38 PM              0 Microsoft.PowerShell_profile.ps1.disabled
-a----        3/17/2016   8:06 AM           1679 profile.ps1.disabled


PS C:\&gt; Enable-Profile

Enable-Profile : Cannot enable profile in unelevated session:
C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1.disabled.fullname
At line:1 char:1
+ Enable-Profile
+ ~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Enable-Prof

    Directory: C:\Users\User01\Documents\WindowsPowerShell


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/3/2016   2:38 PM              0 Microsoft.PowerShell_profile.ps1
-a----        3/17/2016   8:06 AM           1679 profile.ps1
WARNING: Profile changes are not effective until you restart Windows PowerShell


PS C:\&gt; Start-Process PowerShell -Verb runas
[Admin] PS C:\&gt; Enable-Profile


    Directory: C:\Windows\System32\WindowsPowerShell\v1.0


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/9/2016   9:39 AM              0 profile.ps1
WARNING: Profile changes are not effective until you restart Windows PowerShell</dev:code>
				<dev:remarks>
					<maml:para>This example shows the effect of running Disable-Profile in an unelevated session. It also reminds us that
Enable-Profile does not return all enabled profiles. It returns only the profiles that it enabled in the current
command.


The first command uses &apos;Get-Profile -Disabled&apos; to get the disabled profiles in the session. It gets three profiles,
including the $Profile.AllUserAllHosts profile.

The second command runs Enable-Profile in an unelevated session. The command generates an error for the
AllUsersAllHosts profile, but enables the two CurrentUser profiles.

The third command uses Start-Process to start a session with administrator permissions.

The fourth command runs Enable-Profile in an elevated sessions, where it finds the disabled AllUsersAllHosts profile
and enables it. Enable profile returns the profile that it enabled. It does not return all enabled profiles.

Because Enable-Profile affects only enabled profiles and does not generate errors when it can&apos;t find any profiles, you
can run it repeatedly without ill effect.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Enable-Profile
PS C:\&gt;</dev:code>
				<dev:remarks>
					<maml:para>When Enable-Profile cannot find any enabled profiles, it doesn&apos;t return any objects or generate any errors.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Get-Profile</maml:linkText>
				<maml:uri/>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Disable-Profile</maml:linkText>
				<maml:uri/>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<!--Generated by: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
</helpItems>